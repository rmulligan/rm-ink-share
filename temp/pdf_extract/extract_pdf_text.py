#!/usr/bin/env python3
"""
PDF Text Extraction Utility for Remarkable Templates

This script extracts text content from PDF files and formats it for use with
the Remarkable document creation system. It maintains text structure including
paragraphs, headings, and basic formatting.

Usage:
    python extract_pdf_text.py input.pdf [output.txt]
"""

import os
import sys
import re
import PyPDF2
from bs4 import BeautifulSoup
import argparse

def extract_text_from_pdf(pdf_path):
    """Extract text from PDF file with structure preservation."""
    if not os.path.exists(pdf_path):
        print(f"Error: PDF file '{pdf_path}' not found")
        return None

    text_content = []
    
    try:
        with open(pdf_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            num_pages = len(reader.pages)
            
            print(f"Processing {num_pages} pages from {pdf_path}")
            
            for page_num in range(num_pages):
                page = reader.pages[page_num]
                page_text = page.extract_text()
                
                # Split text into paragraphs
                paragraphs = re.split(r'\n\s*\n', page_text)
                paragraphs = [p.replace('\n', ' ').strip() for p in paragraphs if p.strip()]
                
                # Identify potential headings (uppercase or short lines)
                for para in paragraphs:
                    # Check if paragraph might be a heading
                    if len(para) < 100 and (para.isupper() or re.match(r'^[A-Z][^.!?]*$', para)):
                        text_content.append(f"## {para}")
                    else:
                        text_content.append(para)
                
                # Add page separator except for the last page
                if page_num < num_pages - 1:
                    text_content.append("\n--- Page Break ---\n")
            
        return "\n\n".join(text_content)
    
    except Exception as e:
        print(f"Error extracting text from PDF: {e}")
        return None

def extract_text_from_html(html_content):
    """Extract and format text from HTML content."""
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # Remove script and style elements
    for script in soup(["script", "style"]):
        script.extract()
    
    # Extract text with formatting
    formatted_text = []
    
    # Process headings
    for i in range(1, 7):
        for heading in soup.find_all(f'h{i}'):
            text = heading.get_text().strip()
            if text:
                formatted_text.append(f"{'#' * i} {text}")
    
    # Process paragraphs
    for p in soup.find_all('p'):
        text = p.get_text().strip()
        if text:
            formatted_text.append(text)
    
    # Process lists
    for ul in soup.find_all(['ul', 'ol']):
        for li in ul.find_all('li'):
            text = li.get_text().strip()
            if text:
                formatted_text.append(f"• {text}")
    
    return "\n\n".join(formatted_text)

def save_text_to_file(text, output_path):
    """Save extracted text to output file."""
    try:
        with open(output_path, 'w', encoding='utf-8') as file:
            file.write(text)
        print(f"Text successfully saved to {output_path}")
        return True
    except Exception as e:
        print(f"Error saving text to file: {e}")
        return False

def create_remarkable_hcl(text, output_path, title="Extracted Document"):
    """Create an HCL script for Remarkable with the extracted text."""
    # Split text into paragraphs
    paragraphs = text.split("\n\n")
    
    # Format settings
    margin = 50
    y_pos = margin + 50
    max_width = 1304  # 1404 - 2*margin
    line_height = 30
    
    hcl_content = [
        f"# Remarkable document: {title}",
        "# Generated by PDF Extract Tool",
        "",
        "puts \"size 1404 1872\"  # Standard Remarkable size (portrait)",
        "",
        "puts \"pen black\"",
        "puts \"line_width 1\"",
        "",
        f"# Title",
        f"puts \"set_font Roman 24\"",
        f"puts \"text {margin} {margin} \\\"{title}\\\"\"",
        ""
    ]
    
    for para in paragraphs:
        para = para.strip()
        if not para:
            continue
            
        # Check if paragraph is a heading
        if para.startswith("#"):
            # Count heading level and remove # symbols
            level = 0
            while para.startswith("#"):
                level += 1
                para = para[1:]
            para = para.strip()
            
            font_size = max(12, 24 - level * 2)  # Decrease font size by level
            y_pos += line_height * 1.5
            
            hcl_content.append(f"# Heading level {level}")
            hcl_content.append(f"puts \"set_font Roman {font_size}\"")
            hcl_content.append(f"puts \"text {margin} {y_pos} \\\"{para}\\\"\"")
            
        # Special line for page breaks
        elif "--- Page Break ---" in para:
            y_pos += line_height * 2
            hcl_content.append("# Page break in original document")
            hcl_content.append(f"puts \"set_font Lines 10\"")
            hcl_content.append(f"puts \"text {margin} {y_pos} \\\"--- Page Break ---\\\"\"")
            
        # Regular paragraph
        else:
            y_pos += line_height * 1.5
            
            # Check if paragraph starts with a bullet point
            if para.startswith("•"):
                indent = margin + 20
                para = para[1:].strip()
            else:
                indent = margin
                
            hcl_content.append("# Paragraph")
            hcl_content.append(f"puts \"set_font Lines 12\"")
            hcl_content.append(f"puts \"text {indent} {y_pos} \\\"{para}\\\"\"")
            
        y_pos += line_height
    
    try:
        with open(output_path, 'w', encoding='utf-8') as file:
            file.write("\n".join(hcl_content))
        print(f"HCL script saved to {output_path}")
        return True
    except Exception as e:
        print(f"Error saving HCL script: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description="Extract text from PDF files for Remarkable")
    parser.add_argument("input_file", help="Input PDF file path")
    parser.add_argument("-o", "--output", help="Output text file path")
    parser.add_argument("--hcl", action="store_true", help="Create HCL script for Remarkable")
    parser.add_argument("--title", default="Extracted Document", help="Document title for HCL output")
    
    args = parser.parse_args()
    
    # Extract text from PDF
    text = extract_text_from_pdf(args.input_file)
    
    if text:
        # Determine output path
        if args.output:
            output_path = args.output
        else:
            base_name = os.path.splitext(args.input_file)[0]
            output_path = f"{base_name}.txt"
        
        # Save extracted text
        save_text_to_file(text, output_path)
        
        # Create HCL script if requested
        if args.hcl:
            hcl_path = f"{os.path.splitext(output_path)[0]}.hcl"
            create_remarkable_hcl(text, hcl_path, title=args.title)
    
if __name__ == "__main__":
    main()